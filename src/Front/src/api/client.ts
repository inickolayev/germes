/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export interface ISessionClient {
    /**
     * @param chatId (optional) 
     * @return Success
     */
    messages(chatId?: string | undefined): Promise<Message[]>;
    /**
     * @param body (optional) 
     * @return Success
     */
    send(body?: CreateMessageRequest | undefined): Promise<void>;
    /**
     * @return Success
     */
    chats(): Promise<Chat[]>;
    /**
     * @param chatId (optional) 
     * @return Success
     */
    user(chatId?: string | undefined): Promise<User>;
    /**
     * @param chatId (optional) 
     * @return Success
     */
    barometer(chatId?: string | undefined): Promise<BarometerValue>;
    /**
     * @param chatId (optional) 
     * @return Success
     */
    reset(chatId?: string | undefined): Promise<void>;
    /**
     * @param chatId (optional) 
     * @return Success
     */
    suggestions(chatId?: string | undefined): Promise<Suggestions>;
}

export class SessionClient implements ISessionClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param chatId (optional) 
     * @return Success
     */
    messages(chatId?: string | undefined, signal?: AbortSignal | undefined): Promise<Message[]> {
        let url_ = this.baseUrl + "/session/messages?";
        if (chatId === null)
            throw new Error("The parameter 'chatId' cannot be null.");
        else if (chatId !== undefined)
            url_ += "chatId=" + encodeURIComponent("" + chatId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMessages(_response);
        });
    }

    protected processMessages(response: Response): Promise<Message[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Message[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Message[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    send(body?: CreateMessageRequest | undefined, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/session/send";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSend(_response);
        });
    }

    protected processSend(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @return Success
     */
    chats(signal?: AbortSignal | undefined): Promise<Chat[]> {
        let url_ = this.baseUrl + "/session/chats";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChats(_response);
        });
    }

    protected processChats(response: Response): Promise<Chat[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Chat[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Chat[]>(<any>null);
    }

    /**
     * @param chatId (optional) 
     * @return Success
     */
    user(chatId?: string | undefined, signal?: AbortSignal | undefined): Promise<User> {
        let url_ = this.baseUrl + "/session/user?";
        if (chatId === null)
            throw new Error("The parameter 'chatId' cannot be null.");
        else if (chatId !== undefined)
            url_ += "chatId=" + encodeURIComponent("" + chatId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUser(_response);
        });
    }

    protected processUser(response: Response): Promise<User> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <User>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User>(<any>null);
    }

    /**
     * @param chatId (optional) 
     * @return Success
     */
    barometer(chatId?: string | undefined, signal?: AbortSignal | undefined): Promise<BarometerValue> {
        let url_ = this.baseUrl + "/session/barometer?";
        if (chatId === null)
            throw new Error("The parameter 'chatId' cannot be null.");
        else if (chatId !== undefined)
            url_ += "chatId=" + encodeURIComponent("" + chatId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBarometer(_response);
        });
    }

    protected processBarometer(response: Response): Promise<BarometerValue> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <BarometerValue>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BarometerValue>(<any>null);
    }

    /**
     * @param chatId (optional) 
     * @return Success
     */
    reset(chatId?: string | undefined, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/session/reset?";
        if (chatId === null)
            throw new Error("The parameter 'chatId' cannot be null.");
        else if (chatId !== undefined)
            url_ += "chatId=" + encodeURIComponent("" + chatId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            signal,
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReset(_response);
        });
    }

    protected processReset(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * @param chatId (optional) 
     * @return Success
     */
    suggestions(chatId?: string | undefined, signal?: AbortSignal | undefined): Promise<Suggestions> {
        let url_ = this.baseUrl + "/session/suggestions?";
        if (chatId === null)
            throw new Error("The parameter 'chatId' cannot be null.");
        else if (chatId !== undefined)
            url_ += "chatId=" + encodeURIComponent("" + chatId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSuggestions(_response);
        });
    }

    protected processSuggestions(response: Response): Promise<Suggestions> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <Suggestions>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Suggestions>(<any>null);
    }
}

export interface ITelegramBotClient {
    /**
     * @return Success
     */
    telegramBotGET(): Promise<User2>;
    /**
     * @param body (optional) 
     * @return Success
     */
    telegramBotPOST(body?: Update | undefined): Promise<void>;
}

export class TelegramBotClient implements ITelegramBotClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    telegramBotGET(signal?: AbortSignal | undefined): Promise<User2> {
        let url_ = this.baseUrl + "/api/TelegramBot";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTelegramBotGET(_response);
        });
    }

    protected processTelegramBotGET(response: Response): Promise<User2> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <User2>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<User2>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    telegramBotPOST(body?: Update | undefined, signal?: AbortSignal | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/TelegramBot";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            signal,
            headers: {
                "Content-Type": "application/json-patch+json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTelegramBotPOST(_response);
        });
    }

    protected processTelegramBotPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface IUserClient {
    /**
     * @param userId (optional) 
     * @return Success
     */
    info(userId?: string | undefined): Promise<PersonalInfo>;
}

export class UserClient implements IUserClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param userId (optional) 
     * @return Success
     */
    info(userId?: string | undefined, signal?: AbortSignal | undefined): Promise<PersonalInfo> {
        let url_ = this.baseUrl + "/user/info?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInfo(_response);
        });
    }

    protected processInfo(response: Response): Promise<PersonalInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <PersonalInfo>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PersonalInfo>(<any>null);
    }
}

export interface IWeatherForecastClient {
    /**
     * @return Success
     */
    weatherForecast(): Promise<WeatherForecast[]>;
}

export class WeatherForecastClient implements IWeatherForecastClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    weatherForecast(signal?: AbortSignal | undefined): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            signal,
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWeatherForecast(_response);
        });
    }

    protected processWeatherForecast(response: Response): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : <WeatherForecast[]>JSON.parse(_responseText, this.jsonParseReviver);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecast[]>(<any>null);
    }
}

export interface Message {
    id?: string;
    chatId?: string;
    userId?: string;
    text?: string | undefined;
    username?: string | undefined;
    createdAt?: string;
}

export interface CreateMessageRequest {
    source?: string | undefined;
    chatSourceId?: string | undefined;
    chatId?: string;
    userSourceId?: string | undefined;
    text?: string | undefined;
    suggestionId?: string;
}

export interface Chat {
    id?: string;
    sourceId?: string | undefined;
    source?: string | undefined;
    username?: string | undefined;
}

export interface User {
    id?: string;
    sourceId?: string | undefined;
    source?: string | undefined;
    name?: string | undefined;
    birthday?: string;
}

export interface BarometerValue {
    value?: number;
}

export interface Suggestion {
    id?: string;
    text?: string | undefined;
}

export interface Suggestions {
    messages?: Suggestion[] | undefined;
}

export interface User2 {
    id?: number;
    isBot?: boolean;
    firstName?: string | undefined;
    lastName?: string | undefined;
    username?: string | undefined;
    languageCode?: string | undefined;
    canJoinGroups?: boolean | undefined;
    canReadAllGroupMessages?: boolean | undefined;
    supportsInlineQueries?: boolean | undefined;
}

export type ChatType = 0 | 1 | 2 | 3;

export interface ChatPhoto {
    bigFileId?: string | undefined;
    bigFileUniqueId?: string | undefined;
    smallFileId?: string | undefined;
    smallFileUniqueId?: string | undefined;
}

export interface ChatPermissions {
    canSendMessages?: boolean | undefined;
    canSendMediaMessages?: boolean | undefined;
    canSendPolls?: boolean | undefined;
    canSendOtherMessages?: boolean | undefined;
    canAddWebPagePreviews?: boolean | undefined;
    canChangeInfo?: boolean | undefined;
    canInviteUsers?: boolean | undefined;
    canPinMessages?: boolean | undefined;
}

export interface Chat2 {
    id?: number;
    type?: ChatType;
    title?: string | undefined;
    username?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    allMembersAreAdministrators?: boolean;
    photo?: ChatPhoto;
    description?: string | undefined;
    inviteLink?: string | undefined;
    pinnedMessage?: Message2;
    permissions?: ChatPermissions;
    slowModeDelay?: number | undefined;
    stickerSetName?: string | undefined;
    canSetStickerSet?: boolean | undefined;
}

export type MessageEntityType = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15;

export interface MessageEntity {
    type?: MessageEntityType;
    offset?: number;
    length?: number;
    url?: string | undefined;
    user?: User2;
    language?: string | undefined;
}

export interface PhotoSize {
    width?: number;
    height?: number;
    fileId?: string | undefined;
    fileUniqueId?: string | undefined;
    fileSize?: number;
}

export interface Audio {
    duration?: number;
    performer?: string | undefined;
    title?: string | undefined;
    mimeType?: string | undefined;
    thumb?: PhotoSize;
    fileId?: string | undefined;
    fileUniqueId?: string | undefined;
    fileSize?: number;
}

export interface Document {
    thumb?: PhotoSize;
    fileName?: string | undefined;
    mimeType?: string | undefined;
    fileId?: string | undefined;
    fileUniqueId?: string | undefined;
    fileSize?: number;
}

export interface Animation {
    fileId?: string | undefined;
    fileUniqueId?: string | undefined;
    width?: number;
    height?: number;
    duration?: number;
    thumb?: PhotoSize;
    fileName?: string | undefined;
    mimeType?: string | undefined;
    fileSize?: number;
}

export interface Game {
    title?: string | undefined;
    description?: string | undefined;
    photo?: PhotoSize[] | undefined;
    text?: string | undefined;
    textEntities?: MessageEntity[] | undefined;
    animation?: Animation;
}

export type MaskPositionPoint = 0 | 1 | 2 | 3;

export interface MaskPosition {
    point?: MaskPositionPoint;
    xShift?: number;
    yShift?: number;
    scale?: number;
}

export interface Sticker {
    width?: number;
    height?: number;
    isAnimated?: boolean;
    thumb?: PhotoSize;
    emoji?: string | undefined;
    setName?: string | undefined;
    maskPosition?: MaskPosition;
    fileId?: string | undefined;
    fileUniqueId?: string | undefined;
    fileSize?: number;
}

export interface Video {
    width?: number;
    height?: number;
    duration?: number;
    thumb?: PhotoSize;
    mimeType?: string | undefined;
    fileId?: string | undefined;
    fileUniqueId?: string | undefined;
    fileSize?: number;
}

export interface Voice {
    duration?: number;
    mimeType?: string | undefined;
    fileId?: string | undefined;
    fileUniqueId?: string | undefined;
    fileSize?: number;
}

export interface VideoNote {
    length?: number;
    duration?: number;
    thumb?: PhotoSize;
    fileId?: string | undefined;
    fileUniqueId?: string | undefined;
    fileSize?: number;
}

export interface Contact {
    phoneNumber?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    userId?: number;
    vcard?: string | undefined;
}

export interface Location {
    longitude?: number;
    latitude?: number;
}

export interface Venue {
    location?: Location;
    title?: string | undefined;
    address?: string | undefined;
    foursquareId?: string | undefined;
    foursquareType?: string | undefined;
}

export interface PollOption {
    text?: string | undefined;
    voterCount?: number;
}

export interface Poll {
    id?: string | undefined;
    question?: string | undefined;
    options?: PollOption[] | undefined;
    totalVoterCount?: number;
    isClosed?: boolean;
    isAnonymous?: boolean;
    type?: string | undefined;
    allowsMultipleAnswers?: boolean;
    correctOptionId?: number | undefined;
    explanation?: string | undefined;
    explanationEntities?: MessageEntity[] | undefined;
    openPeriod?: number | undefined;
    closeDate?: string | undefined;
}

export interface Dice {
    emoji?: string | undefined;
    value?: number;
}

export interface Invoice {
    title?: string | undefined;
    description?: string | undefined;
    startParameter?: string | undefined;
    currency?: string | undefined;
    totalAmount?: number;
}

export interface ShippingAddress {
    countryCode?: string | undefined;
    state?: string | undefined;
    city?: string | undefined;
    streetLine1?: string | undefined;
    streetLine2?: string | undefined;
    postCode?: string | undefined;
}

export interface OrderInfo {
    name?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    shippingAddress?: ShippingAddress;
}

export interface SuccessfulPayment {
    currency?: string | undefined;
    totalAmount?: number;
    invoicePayload?: string | undefined;
    shippingOptionId?: string | undefined;
    orderInfo?: OrderInfo;
    telegramPaymentChargeId?: string | undefined;
    providerPaymentChargeId?: string | undefined;
}

export interface PassportFile {
    fileDate?: string;
    fileId?: string | undefined;
    fileUniqueId?: string | undefined;
    fileSize?: number;
}

export interface EncryptedPassportElement {
    type?: string | undefined;
    hash?: string | undefined;
    data?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    files?: PassportFile[] | undefined;
    frontSide?: PassportFile;
    reverseSide?: PassportFile;
    selfie?: PassportFile;
    translation?: PassportFile[] | undefined;
}

export interface EncryptedCredentials {
    data?: string | undefined;
    hash?: string | undefined;
    secret?: string | undefined;
}

export interface PassportData {
    data?: EncryptedPassportElement[] | undefined;
    credentials?: EncryptedCredentials;
}

export interface LoginUrl {
    url?: string | undefined;
    forwardText?: string | undefined;
    botUsername?: string | undefined;
    requestWriteAccess?: boolean;
}

export interface InlineKeyboardButton {
    text?: string | undefined;
    url?: string | undefined;
    loginUrl?: LoginUrl;
    callbackData?: string | undefined;
    switchInlineQuery?: string | undefined;
    switchInlineQueryCurrentChat?: string | undefined;
    callbackGame?: any;
    pay?: boolean;
}

export interface InlineKeyboardMarkup {
    readonly inlineKeyboard?: InlineKeyboardButton[][] | undefined;
}

export type MessageType = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29;

export interface Message2 {
    messageId?: number;
    from?: User2;
    date?: string;
    chat?: Chat2;
    readonly isForwarded?: boolean;
    forwardFrom?: User2;
    forwardFromChat?: Chat2;
    forwardFromMessageId?: number;
    forwardSignature?: string | undefined;
    forwardSenderName?: string | undefined;
    forwardDate?: string | undefined;
    replyToMessage?: Message2;
    viaBot?: User2;
    editDate?: string | undefined;
    mediaGroupId?: string | undefined;
    authorSignature?: string | undefined;
    text?: string | undefined;
    entities?: MessageEntity[] | undefined;
    readonly entityValues?: string[] | undefined;
    captionEntities?: MessageEntity[] | undefined;
    readonly captionEntityValues?: string[] | undefined;
    audio?: Audio;
    document?: Document;
    animation?: Animation;
    game?: Game;
    photo?: PhotoSize[] | undefined;
    sticker?: Sticker;
    video?: Video;
    voice?: Voice;
    videoNote?: VideoNote;
    caption?: string | undefined;
    contact?: Contact;
    location?: Location;
    venue?: Venue;
    poll?: Poll;
    dice?: Dice;
    newChatMembers?: User2[] | undefined;
    leftChatMember?: User2;
    newChatTitle?: string | undefined;
    newChatPhoto?: PhotoSize[] | undefined;
    deleteChatPhoto?: boolean;
    groupChatCreated?: boolean;
    supergroupChatCreated?: boolean;
    channelChatCreated?: boolean;
    migrateToChatId?: number;
    migrateFromChatId?: number;
    pinnedMessage?: Message2;
    invoice?: Invoice;
    successfulPayment?: SuccessfulPayment;
    connectedWebsite?: string | undefined;
    passportData?: PassportData;
    replyMarkup?: InlineKeyboardMarkup;
    type?: MessageType;
}

export interface InlineQuery {
    id?: string | undefined;
    from?: User2;
    query?: string | undefined;
    location?: Location;
    offset?: string | undefined;
}

export interface ChosenInlineResult {
    resultId?: string | undefined;
    from?: User2;
    location?: Location;
    inlineMessageId?: string | undefined;
    query?: string | undefined;
}

export interface CallbackQuery {
    id?: string | undefined;
    from?: User2;
    message?: Message2;
    inlineMessageId?: string | undefined;
    chatInstance?: string | undefined;
    data?: string | undefined;
    gameShortName?: string | undefined;
    readonly isGameQuery?: boolean;
}

export interface ShippingQuery {
    id?: string | undefined;
    from?: User2;
    invoicePayload?: string | undefined;
    shippingAddress?: ShippingAddress;
}

export interface PreCheckoutQuery {
    id?: string | undefined;
    from?: User2;
    currency?: string | undefined;
    totalAmount?: number;
    invoicePayload?: string | undefined;
    shippingOptionId?: string | undefined;
    orderInfo?: OrderInfo;
}

export interface PollAnswer {
    pollId?: string | undefined;
    user?: User2;
    optionIds?: number[] | undefined;
}

export type UpdateType = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;

export interface Update {
    id?: number;
    message?: Message2;
    editedMessage?: Message2;
    inlineQuery?: InlineQuery;
    chosenInlineResult?: ChosenInlineResult;
    callbackQuery?: CallbackQuery;
    channelPost?: Message2;
    editedChannelPost?: Message2;
    shippingQuery?: ShippingQuery;
    preCheckoutQuery?: PreCheckoutQuery;
    poll?: Poll;
    pollAnswer?: PollAnswer;
    type?: UpdateType;
}

export interface PersonalInfo {
    id?: string;
    username?: string | undefined;
    name?: string | undefined;
    age?: number;
    readonly label?: string | undefined;
}

export interface WeatherForecast {
    date?: string;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}